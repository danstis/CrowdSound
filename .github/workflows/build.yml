name: Build Test and Release

on:
  push:
    branches:
      - main
      - beta
      - "feature/*"
      - "fix/*"
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v4
        with:
          go-version: ^1.20
        id: go

      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Run go build
        run: go build -v ./...

  test:
    name: Test and Scan
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v4
        with:
          go-version: ^1.20
        id: go
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: "5.x"
      - name: Version with GitVersion # https://github.com/marketplace/actions/use-actions
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.10.2

      - name: Run tests
        run: go test -v -coverprofile=coverage.out -covermode=count -json ./... > test-report.out

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out # optional

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master # https://github.com/marketplace/actions/sonarcloud-scan
        if: ${{ github.actor != 'dependabot[bot]' }}
        with:
          args: >
            -Dsonar.projectVersion=${{ steps.gitversion.outputs.FullSemVer }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v4
        with:
          go-version: ^1.20
        id: go

      - name: Check out code
        uses: actions/checkout@v3

      - name: Run golangci-lint # https://github.com/marketplace/actions/run-golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: latest

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, test, lint]
    if: contains(github.ref, 'main')
    permissions:
      contents: write
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go 1.x
        uses: actions/setup-go@v4
        with:
          go-version: ^1.20
        id: go

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: "5.x"

      - name: Version with GitVersion # https://github.com/marketplace/actions/use-actions
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.10.2

      - name: Bump version and push tag # https://github.com/marketplace/actions/github-tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        if: ${{ steps.gitversion.outputs.PreReleaseTagWithDash == '' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.gitversion.outputs.FullSemVer }}
          release_branches: main
          tag_prefix: v

      - name: Check out code
        uses: actions/checkout@v3
        if: ${{ steps.gitversion.outputs.PreReleaseTagWithDash == '' }}
        with:
          fetch-depth: 0

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        if: ${{ steps.gitversion.outputs.PreReleaseTagWithDash == '' }}
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
